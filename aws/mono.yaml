# assumes the existences of some resources
# an RDS instance
# a VPC & 3 subnets
# two S3 buckets: lgu-cache and lgu-enriched
# a secret
# a route 53 HostedZone
# a cert for www.tna.jurisdatum.com in us-east-1 (see mono-us.yaml)

Resources:

  MonoUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: MonoPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:GetObject'
              Resource:
                - 'arn:aws:s3:::lgu-cache'
                - 'arn:aws:s3:::lgu-cache/*'
                - 'arn:aws:s3:::lgu-enriched'
                - 'arn:aws:s3:::lgu-enriched/*'
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: arn:aws:secretsmanager:eu-west-2:*:secret:mysql1-credentials-java-TLYFa1
            - Effect: Allow
              Action:
                - sqs:GetQueueUrl
                - sqs:SendMessage
              Resource:
                - !GetAtt UpdateQueue.Arn
                - !GetAtt EnrichmentQueue.Arn
                - !GetAtt CheckQueue.Arn
                - !GetAtt TransformQueue.Arn
      UserName: Mono

  Lambda1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-cites-get
      Description: fetch cites from MySQL
      Runtime: nodejs18.x
      Code:
        ZipFile: 'export const handler = async(event) => { };'
      Handler: index.handler
      MemorySize: 128
      Role: arn:aws:iam::128539174500:role/ReadSecrets
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12 # needed to access MySQL
        SubnetIds:
          - subnet-0924c3b54d85bae8a
          - subnet-0b0e18a368b73bf30
          - subnet-0c08732b81facb560

#

  RoleForLambda2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::128539174500:policy/ReadSecrets
      Policies:
        - PolicyName: PolicyForLambda2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt UpdateQueue.Arn
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::lgu-cache'
                  - 'arn:aws:s3:::lgu-cache/*'

  UpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: update
      VisibilityTimeout: 1800 # six times the lambda function timeout

  Lambda2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-update1
      Description: update document from LGU
      Runtime: java11
      Code:
        S3Bucket: mono-code
        S3Key: 'db2-0.1.0.jar'
      Handler: 'uk.gov.legislation.db2.lambda.Update1::handleRequest'
      MemorySize: 512
      Role: !GetAtt RoleForLambda2.Arn
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC

  UpdateTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt UpdateQueue.Arn
      FunctionName: !GetAtt Lambda2.Arn

#

  RoleForLambda3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::128539174500:policy/ReadSecrets
      Policies:
        - PolicyName: PolicyForLambda3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt EnrichmentQueue.Arn
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::lgu-cache'
                  - 'arn:aws:s3:::lgu-cache/*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::lgu-enriched'
                  - 'arn:aws:s3:::lgu-enriched/*'
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource: !GetAtt TransformQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt EnrichmentDeadLetterQueue.Arn

  Lambda3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-enrich1
      Description: enrich document with citations
      Runtime: java11
      Code:
        S3Bucket: mono-code
        S3Key: 'db2-0.1.0.jar'
      Handler: 'uk.gov.legislation.db2.lambda.Enrich1::handleRequest'
      MemorySize: 6144
      Role: !GetAtt RoleForLambda3.Arn
      Timeout: 600
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
      DeadLetterConfig:
        TargetArn: !GetAtt EnrichmentDeadLetterQueue.Arn

  EnrichmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: enrich
      VisibilityTimeout: 3600 # six times the lambda function timeout
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EnrichmentDeadLetterQueue.Arn
        maxReceiveCount: 2

  EnrichmentTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt EnrichmentQueue.Arn
      FunctionName: !GetAtt Lambda3.Arn
      FunctionResponseTypes:
        - ReportBatchItemFailures

  EnrichmentDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: enrich-dead-letter
      VisibilityTimeout: 1800

#

  RoleForLambda4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::128539174500:policy/ReadSecrets
      Policies:
        - PolicyName: PolicyForLambda4
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::lgu-cache'
                  - 'arn:aws:s3:::lgu-cache/*'
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:GetQueueAttributes # may be unnecessary
                  - sqs:SendMessage
                Resource: !GetAtt EnrichmentQueue.Arn
  Lambda4:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-scrape-new
      Description: consume new legislation feed
      Runtime: java11
      Code:
        S3Bucket: mono-code
        S3Key: 'db2-0.1.0.jar'
      Handler: 'uk.gov.legislation.db2.lambda.ScrapeNew::handleRequest'
      MemorySize: 512
      Role: !GetAtt RoleForLambda4.Arn
      Timeout: 600
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
  TriggerForLambda4:
    Type: AWS::Events::Rule
    Properties:
      Name: ScrapeTrigger
      Description: trigger scrape new
      ScheduleExpression: rate(24 hours)
      Targets:
        - Arn: !GetAtt Lambda4.Arn
          Id: TriggerForLambda4
  PermissionForTriggerForLambda4:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: Lambda4
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerForLambda4.Arn


# queue and lambda function for transforming documents
  TransformQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: transform
      VisibilityTimeout: 3600 # six times the lambda function timeout
  RoleForTransformLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: PolicyForLambda3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt TransformQueue.Arn
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::lgu-enriched'
                  - 'arn:aws:s3:::lgu-enriched/*'
  TransformLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-transform1
      Description: transform CLML to AkN and HTML
      Runtime: java11
      Code:
        S3Bucket: mono-code
        S3Key: 'db2-0.1.0.jar'
      Handler: 'uk.gov.legislation.db2.lambda.Transform1::handleRequest'
      MemorySize: 512
      Role: !GetAtt RoleForTransformLambda.Arn
      Timeout: 600
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12 # may not be necessary in this case
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
  TransformTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt TransformQueue.Arn
      FunctionName: !GetAtt TransformLambda.Arn

# queue and lambda function for checking atom feeds for changes
  CheckQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: check
      VisibilityTimeout: 3600 # six times the lambda function timeout
  RoleForCheckLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::128539174500:policy/ReadSecrets
      Policies:
        - PolicyName: PolicyForCheckFunction
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt CheckQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource: !GetAtt UpdateQueue.Arn
  CheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-check-known
      Description: check for updates to documents
      Runtime: java11
      Code:
        S3Bucket: mono-code
        S3Key: 'db2-0.1.0.jar'
      Handler: 'uk.gov.legislation.db2.lambda.CheckKnown::handleRequest'
      MemorySize: 512
      Role: !GetAtt RoleForCheckLambda.Arn
      Timeout: 600
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
  CheckTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt CheckQueue.Arn
      FunctionName: !GetAtt CheckLambda.Arn

#
  ApiLambdaTypesGet:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-api-types-get
      Description: fetch document types from MySQL
      Runtime: nodejs18.x
      Code:
        S3Bucket: mono-code
        S3Key: api.zip
      Handler: endpoints/types.handler
      MemorySize: 128
      Role: arn:aws:iam::128539174500:role/ReadSecrets
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12 # needed to access MySQL
        SubnetIds:
          - subnet-0924c3b54d85bae8a
          - subnet-0b0e18a368b73bf30
          - subnet-0c08732b81facb560
  ApiLambdaYearsGet:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-api-years-get
      Description: fetch document years from MySQL
      Runtime: nodejs18.x
      Code:
        S3Bucket: mono-code
        S3Key: api.zip
      Handler: endpoints/years.handler
      MemorySize: 128
      Role: arn:aws:iam::128539174500:role/ReadSecrets
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12 # needed to access MySQL
        SubnetIds:
          - subnet-0924c3b54d85bae8a
          - subnet-0b0e18a368b73bf30
          - subnet-0c08732b81facb560
  ApiLambdaDocsGet:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-api-docs-get
      Description: fetch document metadata from MySQL
      Runtime: nodejs18.x
      Code:
        S3Bucket: mono-code
        S3Key: api.zip
      Handler: endpoints/docs.handler
      MemorySize: 128
      Role: arn:aws:iam::128539174500:role/ReadSecrets
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - sg-0c3756eca9fa12c12 # needed to access MySQL
        SubnetIds:
          - subnet-0924c3b54d85bae8a
          - subnet-0b0e18a368b73bf30
          - subnet-0c08732b81facb560

  ExtractTableLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: mono-api-table-get
      Description: get one table from a CLML document
      Runtime: java11
      Code:
        S3Bucket: mono-code
        S3Key: 'api-tables-0.1.0.jar'
      Handler: 'uk.gov.legislation.api.Tables::handleRequest'
      MemorySize: 256
      Role: !GetAtt RoleForTablesLambda.Arn
      Timeout: 60
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
      SnapStart:
        ApplyOn: PublishedVersions

  RoleForTablesLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: PolicyForTablesLambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::lgu-cache'
                  - 'arn:aws:s3:::lgu-cache/*'


### networking ###

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: vpc-007916ad98375c4a7
      CidrBlock: 172.30.11.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ] # the first AZ in the list
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: vpc-007916ad98375c4a7
      CidrBlock: 172.30.12.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: vpc-007916ad98375c4a7
      CidrBlock: 172.30.13.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-007916ad98375c4a7
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: subnet-0924c3b54d85bae8a # one of the public ones
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable

# API

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: 3.0.3
        info:
          title: Mono
          version: '0.1.0'
        paths:
          /cites:
            get:
              summary: Retrieve cites to or from
              parameters:
                  - name: to
                    in: query
                    schema:
                        type: string
                  - name: from
                    in: query
                    schema:
                        type: string
              responses:
                  '200':
                    description: the cites
                  '400':
                    description: bad reqeust
                  '500':
                    description: internal error
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/integration1'
          /document/{proxy+}:
            get:
              summary: Retrieve a document
              parameters:
                  - name: id
                    in: query
                    schema:
                        type: string
              responses:
                  '200':
                    description: the document
                  '400':
                    description: bad reqeust
                  '404':
                    description: not found
                  '500':
                    description: internal error
              x-amazon-apigateway-integration:
                type: HTTP_PROXY
                httpMethod: GET
                uri: 'https://lgu-enriched.s3.eu-west-2.amazonaws.com/{proxy}'
                payloadFormatVersion: '1.0'
          /legislation/types:
            get:
              summary: Retrieve available document types
              responses:
                  '200':
                    description: the types
                  '400':
                    description: bad reqeust
                  '500':
                    description: internal error
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/int-leg-types'
          /legislation/years/{type}:
            get:
              summary: Retrieve years available for a document type
              parameters:
                  - name: type
                    in: path
                    schema:
                        type: string
              responses:
                  '200':
                    description: the years
                  '400':
                    description: bad reqeust
                  '500':
                    description: internal error
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/int-leg-years'
          /legislation/docs/{type}/{year}:
            get:
              summary: Retrieve docs available for a document type and year
              parameters:
                  - name: type
                    in: path
                    schema:
                        type: string
                  - name: year
                    in: path
                    schema:
                        type: string
              responses:
                  '200':
                    description: the documents
                  '400':
                    description: bad reqeust
                  '500':
                    description: internal error
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/int-leg-docs'
          /legislation/tables:
            get:
              summary: Retrieve a table from a document
              parameters:
                  - name: document
                    in: query
                    required: true
                    schema:
                      type: string
                  - name: table
                    in: query
                    required: true
                    schema:
                      type: integer
                  - name: format
                    in: query
                    required: false
                    schema:
                      type: string
                      enum:
                        - html
                        - csv
                        - xlsx
                      default: html
              responses:
                  '200':
                    description: the table
                  '400':
                    description: bad reqeust
                  '404':
                    description: not found
                  '500':
                    description: internal error
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/int-tables'

        x-amazon-apigateway-cors:
          allowOrigins:
            - http://localhost:3000
            - https://www.tna.jurisdatum.com
          allowHeaders:
            - x-apigateway-header
            - x-amz-date
            - content-type

        components:
          x-amazon-apigateway-integrations:
            integration1:
              type: 'aws_proxy'
              uri: !GetAtt Lambda1.Arn
              payloadFormatVersion: '2.0'
            int-leg-types:
              type: 'aws_proxy'
              uri: !GetAtt ApiLambdaTypesGet.Arn
              payloadFormatVersion: '2.0'
            int-leg-years:
              type: 'aws_proxy'
              uri: !GetAtt ApiLambdaYearsGet.Arn
              payloadFormatVersion: '2.0'
            int-leg-docs:
              type: 'aws_proxy'
              uri: !GetAtt ApiLambdaDocsGet.Arn
              payloadFormatVersion: '2.0'
            int-tables:
              type: 'aws_proxy'
              uri: !GetAtt ExtractTableLambda.Arn
              payloadFormatVersion: '2.0'

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      AutoDeploy: true
      StageName: '$default'

  LambdaPermission1:
    Description: Allows /cites endpoint to invoke mono-cites-get function
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Lambda1
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref Api
            - '*/*/cites' # start with / ?
  LambdaPermissionForLegislationTypesEndpoint:
    Description: Allows /legislation/types endpoint to invoke mono-api-types-get function
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ApiLambdaTypesGet
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref Api
            - '/*/*/legislation/types'
  LambdaPermissionForLegislationYearsEndpoint:
    Description: Allows /legislation/years endpoint to invoke mono-api-years-get function
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ApiLambdaYearsGet
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref Api
            - '/*/*/legislation/years/{type}'
  LambdaPermissionForLegislationDocsEndpoint:
    Description: Allows /legislation/{type}/{year} endpoint to invoke mono-api-docs-get function
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ApiLambdaDocsGet
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref Api
            - '/*/*/legislation/docs/{type}/{year}'

  LambdaPermissionForTablesEndpoint:
    Description: Allows /legislation/tables endpoint to invoke mono-api-table-get function
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ExtractTableLambda
      Principal: 'apigateway.amazonaws.com'
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref Api
            - '/*/*/legislation/tables'


# custom domain for api
  Cert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: api.tna.jurisdatum.com
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: api.tna.jurisdatum.com
          HostedZoneId: Z04617232K3KXU7UGL477
  DomainNameForApi:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: api.tna.jurisdatum.com
      DomainNameConfigurations:
        - CertificateArn: !Ref Cert
  ApiMappingForDomainName:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: api.tna.jurisdatum.com
      Stage: '$default'
  DNSEntry:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z04617232K3KXU7UGL477
      Type: CNAME
      Name: api.tna.jurisdatum.com
      ResourceRecords:
        - !GetAtt DomainNameForApi.RegionalDomainName
      TTL: 900

### front end
  S3BucketForSPA:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: www.tna.jurisdatum.com
  BucketPolicy4SPA:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: www.tna.jurisdatum.com
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action:
            - 's3:GetObject'
          Resource:
            - 'arn:aws:s3:::www.tna.jurisdatum.com'
            - 'arn:aws:s3:::www.tna.jurisdatum.com/*'
          # Condition:
          #   StringEquals:
          #     AWS:SourceArn:
          #       !Join
          #       - ''
          #       - - 'arn:aws:cloudfront::'
          #         - !Ref AWS::AccountId
          #         - ':distribution/'
          #         - !Ref CloudFrontDist4SPA
  CFOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: monoS3OriginAccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontDist4SPA:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: www.tna.jurisdatum.com.s3.eu-west-2.amazonaws.com
          Id: monoS3Origin
          OriginAccessControlId: !Ref CFOriginAccessControl
          S3OriginConfig:
            OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
        - www.tna.jurisdatum.com
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: monoS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:128539174500:certificate/8b7da007-97bb-470d-b0f4-e41d3e762ee6
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
        CustomErrorResponses:
        - ErrorCode: 403 # needed for React routes
          ResponsePagePath: /index.html
          ResponseCode: 200
  DNSEntry2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z04617232K3KXU7UGL477
      Type: CNAME
      Name: www.tna.jurisdatum.com
      ResourceRecords:
        - !GetAtt CloudFrontDist4SPA.DomainName
      TTL: 900
