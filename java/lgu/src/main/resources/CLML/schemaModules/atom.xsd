<?xml version="1.0" encoding="UTF-8"?>
<!--
  
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
	targetNamespace="http://www.w3.org/2005/Atom" xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:xhtml="http://www.w3.org/1999/xhtml" version="2.2" id="atom">
	<xs:annotation>
		<xs:appinfo xmlns:dcq="http://purl.org/dc/terms/" xmlns:dc="http://purl.org/dc/elements/1.1/">
			<dc:title>Atom schema</dc:title>
			<dc:description>Schema defining atom elements and structures that may be used in Legislation</dc:description>
			<dc:date>
				<dcq:modified>2020-03-06</dcq:modified>
			</dc:date>
			<xs:documentation>
			<xs:documentation>
			Originally Generated from -*- rnc -*- RELAX NG Compact Syntax Grammar for the Atom Format Specification Version 11
			</xs:documentation>
			Namespace information:
			This schema is defined as being the in the namespace 'http://www.w3.org/2005/Atom'
			</xs:documentation>
			<xs:documentation>
			Modification information (for version number strategy see ../readMe.txt)
			Version	Name				   Modification
			2.2		Colin Mackenzie		Changed the model for atom:category (not used in legislation) and atom:link (used in final data set)
												so that the models are deterministic and therefore can be supported by MSXML.
												This was acheived by restricting the content model to attribute only which is  how the elements are used in legislation.
			2.2		Colin Mackenzie		Added metadata and version and id attribute to be consistent with legislation schemas
											  (and to support new versions/documentation approach)
			</xs:documentation>
		</xs:appinfo>
	</xs:annotation>
	<xs:import namespace="http://www.w3.org/1999/xhtml" schemaLocation="xhtml.xsd"/>
	<xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
	<!-- Common attributes -->
	<xs:attributeGroup name="atomCommonAttributes">
		<xs:attribute ref="xml:base"/>
		<xs:attribute ref="xml:lang"/>
	</xs:attributeGroup>
	<!-- Text Constructs -->
	<xs:attributeGroup name="atomPlainTextConstruct">
		<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		<xs:attribute name="type">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="text"/>
					<xs:enumeration value="html"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="atomXHTMLTextConstruct" abstract="true">
		<xs:complexType mixed="true">
			<xs:group minOccurs="0" maxOccurs="unbounded" ref="atom:anyXHTML"/>
			<xs:anyAttribute processContents="lax"/>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="atomXHTMLTextConstruct">
		<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		<xs:attribute name="type" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="xhtml"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:complexType name="atomTextConstruct" mixed="true">
		<xs:sequence>
			<xs:element minOccurs="0" ref="atom:atomXHTMLTextConstruct"/>
		</xs:sequence>
		<xs:attribute name="type">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="text"/>
					<xs:enumeration value="html"/>
					<xs:enumeration value="xhtml"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attributeGroup ref="atom:atomCommonAttributes"/>
	</xs:complexType>
	<!-- Person Construct -->
	<xs:complexType name="atomPersonConstruct">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element ref="atom:name"/>
			<xs:element ref="atom:uri"/>
			<xs:element ref="atom:email"/>
		</xs:choice>
		<xs:attributeGroup ref="atom:atomCommonAttributes"/>
	</xs:complexType>
	<xs:element name="name" type="xs:string"/>
	<xs:element name="uri" type="xs:string"/>
	<xs:element name="email" type="atom:atomEmailAddress"/>
	<!-- Date Construct -->
	<xs:complexType name="atomDateConstruct">
		<xs:simpleContent>
			<xs:extension base="xs:dateTime">
				<xs:attributeGroup ref="atom:atomCommonAttributes"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- atom:feed -->
	<xs:element name="feed">
		<xs:complexType>
			<xs:sequence>
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element ref="atom:author"/>
					<xs:element ref="atom:category"/>
					<xs:element ref="atom:contributor"/>
					<xs:element ref="atom:generator"/>
					<xs:element ref="atom:icon"/>
					<xs:element ref="atom:id"/>
					<xs:element ref="atom:link"/>
					<xs:element ref="atom:logo"/>
					<xs:element ref="atom:rights"/>
					<xs:element ref="atom:subtitle"/>
					<xs:element ref="atom:title"/>
					<xs:element ref="atom:updated"/>
				</xs:choice>
				<xs:element minOccurs="0" maxOccurs="unbounded" ref="atom:entry"/>
			</xs:sequence>
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:entry -->
	<xs:element name="entry">
		<xs:complexType>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="atom:author"/>
				<xs:element ref="atom:category"/>
				<xs:element ref="atom:content"/>
				<xs:element ref="atom:contributor"/>
				<xs:element ref="atom:id"/>
				<xs:element ref="atom:link"/>
				<xs:element ref="atom:published"/>
				<xs:element ref="atom:rights"/>
				<xs:element ref="atom:source"/>
				<xs:element ref="atom:summary"/>
				<xs:element ref="atom:title"/>
				<xs:element ref="atom:updated"/>
			</xs:choice>
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:content -->
	<xs:element name="content">
		<xs:complexType mixed="true">
			<xs:choice>
				<xs:group minOccurs="0" maxOccurs="unbounded" ref="atom:anyElement"/>
			</xs:choice>
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
			<xs:attribute name="type" default="text">
				<xs:simpleType>
					<xs:union memberTypes="atom:atomMediaType">
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="text"/>
								<xs:enumeration value="html"/>
								<xs:enumeration value="xhtml"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:union>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="src" type="xs:anyURI"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:author -->
	<xs:element name="author" type="atom:atomPersonConstruct"/>
	<!-- atom:category -->
	<xs:element name="category">
		<xs:complexType>
			<!-- Colin Mackenzie 06/03/2020
				MSXML4 thinks this is invalid as derived type and base type must have the same content type
				<xs:complexContent>
				<xs:extension base="atom:undefinedContent">
					<xs:attributeGroup ref="atom:atomCommonAttributes"/>
					<xs:attribute name="term" use="required"/>
					<xs:attribute name="scheme"/>
					<xs:attribute name="label"/>
				</xs:extension>
			</xs:complexContent>
			But we do not EVER put content in atom values and we do not even use or refer to category
				so I refer directly to content model instead -->
			<!--<xs:group minOccurs="0" maxOccurs="unbounded" ref="atom:anyForeignElement"/>-->
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
			<xs:attribute name="term" use="required"/>
			<xs:attribute name="scheme"/>
			<xs:attribute name="label"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:contributor -->
	<xs:element name="contributor" type="atom:atomPersonConstruct"/>
	<!-- atom:generator -->
	<xs:element name="generator">
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
			<xs:attribute name="uri"/>
			<xs:attribute name="version"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:icon -->
	<xs:element name="icon">
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:id -->
	<xs:element name="id">
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:logo -->
	<xs:element name="logo">
		<xs:complexType mixed="true">
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:link -->
	<xs:element name="link">
		<xs:annotation>
			<xs:documentation>Describes links to parts of the current legislation document or to alternative renditions of that content (auto-generated in final delivered XML) in Atom format.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<!--  Colin Mackenzie 06/03/2020
				MSXML4 thinks this is invalid as derived type and base type must have the same content typeMSXML4 thinks this is invalid as derived type and base type must have the same content type
				<xs:complexContent>
				<xs:extension base="atom:undefinedContent">
					<xs:attributeGroup ref="atom:atomCommonAttributes"/>
					<xs:attribute name="href" use="required"/>
					<xs:attribute name="rel"/>
					<xs:attribute name="type" type="atom:atomMediaType"/>
					<xs:attribute name="hreflang" type="atom:atomLanguageTag"/>
					<xs:attribute name="title"/>
					<xs:attribute name="length"/>
				</xs:extension>
			</xs:complexContent>
			But we do not put content inside atom links so I could refer directly to content model instead 
			or simply not all any content (as done below) -->
			<!--<xs:group minOccurs="0" maxOccurs="unbounded" ref="atom:anyForeignElement"/>-->
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
			<xs:attribute name="href" use="required"/>
			<xs:attribute name="rel"/>
			<xs:attribute name="type" type="atom:atomMediaType"/>
			<xs:attribute name="hreflang" type="atom:atomLanguageTag"/>
			<xs:attribute name="title"/>
			<xs:attribute name="length"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:published -->
	<xs:element name="published" type="atom:atomDateConstruct"/>
	<!-- atom:rights -->
	<xs:element name="rights" type="atom:atomTextConstruct"/>
	<!-- atom:source -->
	<xs:element name="source">
		<xs:complexType>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="atom:author"/>
				<xs:element ref="atom:category"/>
				<xs:element ref="atom:contributor"/>
				<xs:element ref="atom:generator"/>
				<xs:element ref="atom:icon"/>
				<xs:element ref="atom:id"/>
				<xs:element ref="atom:link"/>
				<xs:element ref="atom:logo"/>
				<xs:element ref="atom:rights"/>
				<xs:element ref="atom:subtitle"/>
				<xs:element ref="atom:title"/>
				<xs:element ref="atom:updated"/>
			</xs:choice>
			<xs:attributeGroup ref="atom:atomCommonAttributes"/>
		</xs:complexType>
	</xs:element>
	<!-- atom:subtitle -->
	<xs:element name="subtitle" type="atom:atomTextConstruct"/>
	<!-- atom:summary -->
	<xs:element name="summary" type="atom:atomTextConstruct"/>
	<!-- atom:title -->
	<xs:element name="title" type="atom:atomTextConstruct"/>
	<!-- atom:updated -->
	<xs:element name="updated" type="atom:atomDateConstruct"/>
	<!-- Low-level simple types -->
	<xs:simpleType name="atomNCName">
		<xs:restriction base="xs:string">
			<xs:minLength value="1"/>
			<xs:pattern value="[^:]*"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Whatever a media type is, it contains at least one slash -->
	<xs:simpleType name="atomMediaType">
		<xs:restriction base="xs:string">
			<xs:pattern value=".+/.+"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- As defined in RFC 3066 -->
	<xs:simpleType name="atomLanguageTag">
		<xs:restriction base="xs:string">
			<xs:pattern value="[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"/>
		</xs:restriction>
	</xs:simpleType>
	<!--
    Unconstrained; it's not entirely clear how IRI fit into
    xsd:anyURI so let's not try to constrain it here
  -->
	<!-- Whatever an email address is, it contains at least one @ -->
	<xs:simpleType name="atomEmailAddress">
		<xs:restriction base="xs:string">
			<xs:pattern value=".+@.+"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Simple Extension -->
	<xs:group name="simpleExtensionElement">
		<xs:choice>
			<xs:any namespace="##other" processContents="lax"/>
			<xs:any namespace="##local" processContents="lax"/>
		</xs:choice>
	</xs:group>
	<!-- Structured Extension -->
	<xs:group name="structuredExtensionElement">
		<xs:choice>
			<xs:any namespace="##other" processContents="lax"/>
			<xs:any namespace="##local" processContents="lax"/>
		</xs:choice>
	</xs:group>
	<!-- Other Extensibility -->
	<xs:group name="extensionElement">
		<xs:choice>
			<xs:group ref="atom:simpleExtensionElement"/>
			<xs:group ref="atom:structuredExtensionElement"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="undefinedContent" mixed="true">
		<xs:group minOccurs="0" maxOccurs="unbounded" ref="atom:anyForeignElement"/>
	</xs:complexType>
	<xs:group name="anyElement">
		<xs:sequence>
			<xs:any processContents="lax"/>
		</xs:sequence>
	</xs:group>
	<xs:group name="anyForeignElement">
		<!--  Colin Mackenzie 06/03/2020
		MSXML4 thinks this is invalid as derived type and base type must have the same content typeColin: we need a deterministic version to stop MSXML form erroring
			Note: we no longer use this model anyway as we need empty elements for atom:link
		<xs:choice>
			<xs:any namespace="##other" processContents="lax"/>
			<xs:any namespace="##local" processContents="lax"/>
		</xs:choice> -->
		<xs:sequence>
			<xs:any namespace="##any" processContents="lax"/>
		</xs:sequence>
	</xs:group>
	<!-- XHTML -->
	<xs:group name="anyXHTML">
		<xs:sequence>
			<xs:any namespace="http://www.w3.org/1999/xhtml" processContents="lax"/>
		</xs:sequence>
	</xs:group>
</xs:schema>
