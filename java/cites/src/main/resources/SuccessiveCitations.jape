Phase: SuccessiveCitations
Input: Token
Options: control = appelt

Rule: EUSuccessive1
Priority: 3
(
	( { Token.string == "," } | { Token.string == "and" } | { Token.string == "or" } )
	(
	  ( { Token.string == "(" }
	    ( { Token.string == "EU" } | { Token.string == "EC" } | { Token.string == "EEC" } )
	    { Token.string == ")" } ) ?
	  ( { Token.string == "No" }
	    ( { Token.string == "." } ) ? ) ?
	  ( { Token.kind == "number" } ) :number
	  { Token.string == "/" }
	  ( { Token.kind == "number" } ) :year
	  ( { Token.string == "/" }
	    ( { Token.string == "EU" } | { Token.string == "EC" } | { Token.string == "EEC" } ) ) ?
	): cite
) --> {

	java.util.function.Predicate<gate.AnnotationSet> isWithinCitation =
		(java.util.function.Predicate<gate.AnnotationSet>) this.ctx.getController().getFeatures().get("isWithinCitation");
	java.util.function.Function<gate.AnnotationSet, gate.Annotation> getPrecedingCite =
		(java.util.function.Function<gate.AnnotationSet, gate.Annotation>) this.ctx.getController().getFeatures().get("getPrecedingCite");

	gate.AnnotationSet cite = (gate.AnnotationSet) bindings.get("cite");

	if (isWithinCitation.test(cite))
		return;
	gate.Annotation full = getPrecedingCite.apply(cite);
	if (full == null)
		return;

	String fullClass = (String) full.getFeatures().get("Class");
	if (!fullClass.startsWith("EuropeanUnion"))
		return;
	String year = (String) bindings.get("year").iterator().next().getFeatures().get("string");
	String number = (String) bindings.get("number").iterator().next().getFeatures().get("string");

	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("Class", fullClass);
	features.put("Year", year);
	features.put("Number", number);
	outputAS.add(cite.firstNode(), cite.lastNode(), "Citation", features);
}

Rule: UKSISuccessive1
Priority: 1
(
	( { Token.kind == "number", Token.length == 4 } ) :year
	{ Token.string == "/" }
	( { Token.kind == "number" } ) :number
): cite --> {

	java.util.function.Predicate<gate.AnnotationSet> isWithinCitation =
		(java.util.function.Predicate<gate.AnnotationSet>) this.ctx.getController().getFeatures().get("isWithinCitation");
	java.util.function.Function<gate.AnnotationSet, gate.Annotation> getPrecedingCite =
		(java.util.function.Function<gate.AnnotationSet, gate.Annotation>) this.ctx.getController().getFeatures().get("getPrecedingCite");

	gate.AnnotationSet cite = (gate.AnnotationSet) bindings.get("cite");

	if (isWithinCitation.test(cite))
		return;
	gate.Annotation full = getPrecedingCite.apply(cite);
	if (full == null)
		return;

	String fullClass = (String) full.getFeatures().get("Class");
	String year = (String) bindings.get("year").iterator().next().getFeatures().get("string");
	String number = (String) bindings.get("number").iterator().next().getFeatures().get("string");

	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("Class", fullClass);
	features.put("Year", year);
	features.put("Number", number);
	inputAS.add(cite.firstNode(), cite.lastNode(), "SuccessiveCitation", features);
}

Rule: UKSISuccessive2
Priority: 2
(
	( { Token.kind == "number", Token.length == 4 } ) :year
	{ Token.string == "/" }
	( { Token.kind == "number" } ) :number
	{ Token.string == "(" }
	( { Token.string == "C" } ) :series
	{ Token.string == "." }
	( { Token.kind == "number" } ) :number2
	{ Token.string == ")" }
): cite --> {

	java.util.function.Predicate<gate.AnnotationSet> isWithinCitation =
		(java.util.function.Predicate<gate.AnnotationSet>) this.ctx.getController().getFeatures().get("isWithinCitation");
	java.util.function.Function<gate.AnnotationSet, gate.Annotation> getPrecedingCite =
		(java.util.function.Function<gate.AnnotationSet, gate.Annotation>) this.ctx.getController().getFeatures().get("getPrecedingCite");

	gate.AnnotationSet cite = (gate.AnnotationSet) bindings.get("cite");

	if (isWithinCitation.test(cite))
		return;
	gate.Annotation full = getPrecedingCite.apply(cite);
	if (full == null)
		return;

	String fullClass = (String) full.getFeatures().get("Class");
	String year = (String) bindings.get("year").iterator().next().getFeatures().get("string");
	String number = (String) bindings.get("number").iterator().next().getFeatures().get("string");

	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("Class", fullClass);
	features.put("Year", year);
	features.put("Number", number);
	inputAS.add(cite.firstNode(), cite.lastNode(), "SuccessiveCitation", features);
}
