Phase: EUCitations
Input: Token
Options: control = appelt

Rule: EUCitation
Priority: 1
(
	( { Token.string == "Commission" } | { Token.string == "Council" } ) ?
	( { Token.string == "Implementing" } | { Token.string == "Delegated" } ) ?
	( { Token.string ==~ "[Rr]egulations?" } | { Token.string ==~ "[Dd]ecisions?" } | { Token.string ==~ "[Dd]irectives?" } ) :type
	( { Token.string == "(" }
	  ( { Token.string == "EU" } | { Token.string == "EC" } | { Token.string == "EEC" } )
	  ( { Token.string == "," } { Token.string == "Euratom" } ) ?
	  { Token.string == ")" } ) ?
	( { Token.string == "No" }
	  ( { Token.string == "." } ) ? ) ?
	( { Token.kind == "number" } ) :number
	{ Token.string == "/" }
	( { Token.kind == "number" } ) :year
	( { Token.string == "/" }
	  ( { Token.string == "EU" } | { Token.string == "EC" } | { Token.string == "EEC" } ) ) ?
): cite --> {

	gate.AnnotationSet cite = (gate.AnnotationSet) bindings.get("cite");

	String tpe = (String) bindings.get("type").iterator().next().getFeatures().get("string");
	String year = (String) bindings.get("year").iterator().next().getFeatures().get("string");
	String number = (String) bindings.get("number").iterator().next().getFeatures().get("string");

	tpe = tpe.substring(0, 1).toUpperCase() + tpe.substring(1);
	tpe = "EuropeanUnion" + tpe;
	if (tpe.endsWith("s"))
		tpe = tpe.substring(0, tpe.length() - 1);

	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("Class", tpe);
	features.put("Year", year);
	features.put("Number", number);
	outputAS.add(cite.firstNode(), cite.lastNode(), "Citation", features);
}

Rule: OJCitation
Priority: 1
(
	( ( { Token.string == "O" } { Token.string == "." } { Token.string == "J" } { Token.string == "." } ) |
	  { Token.string == "OJ" } )
	{ Token.string == "No" }
	( { Token.string == "." } ) ?
	( { Token.string == "L" } | { Token.string == "C" } ) :series
	( { Token.kind == "number" } ) :issue
	{ Token.string == "," }
	( { Token.kind == "number" } ) :day
	{ Token.string == "." }
	( { Token.kind == "number" } ) :month
	{ Token.string == "." }
	( { Token.kind == "number" } ) :year
	( { Token.string == "," } ) ?
	{ Token.string == "p" }
	( { Token.string == "." } ) ?
	( { Token.kind == "number" } ) :page
): cite --> {

	gate.AnnotationSet cite = (gate.AnnotationSet) bindings.get("cite");

	String type = "EuropeanUnionOfficialJournal";

	String series = (String) bindings.get("series").iterator().next().getFeatures().get("string");
	String number = (String) bindings.get("issue").iterator().next().getFeatures().get("string");
	int day = Integer.parseInt((String) bindings.get("day").iterator().next().getFeatures().get("string"));
	int month = Integer.parseInt((String) bindings.get("month").iterator().next().getFeatures().get("string"));
	int year = Integer.parseInt((String) bindings.get("year").iterator().next().getFeatures().get("string"));
	String page = (String) bindings.get("page").iterator().next().getFeatures().get("string");

	java.util.function.Function<Integer, Integer> normalizeYear =
		(java.util.function.Function<Integer, Integer>) this.ctx.getController().getFeatures().get("normalizeYear");
	try {
		year = normalizeYear.apply(year);
	} catch (IllegalArgumentException e) {
		System.err.print("WARNING: bad year in OJ cite: ");
		System.err.print(gate.Utils.stringFor(cite.getDocument(), cite));
		System.err.println();
		return;
	}

	String date = year + "-" + String.format("%02d", month) + "-" + String.format("%02d", day);

	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("Class", type);
	features.put("Year", year);
	features.put("Series", series);
	features.put("Number", number);
	features.put("Date", date);
	features.put("StartPage", page);
	outputAS.add(cite.firstNode(), cite.lastNode(), "Citation", features);
}
